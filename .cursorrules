# MYOB AI Playbook - Cursor Rules for AI-Assisted Development

## Purpose

These rules guide AI tools (Cursor, GitHub Copilot) when generating code for MYOB projects. This focuses on AI-specific guidance. For general technical standards, see the **MYOB Architecture Codex**.

## AI-Assisted Development Guidelines

### Code Generation Standards

**TypeScript (Primary Language):**
- Generate TypeScript, not JavaScript
- Use strict mode (`"strict": true` in tsconfig.json)
- Explicit types, avoid `any` unless absolutely necessary
- Use interfaces for data structures, types for unions/primitives

**Financial Calculations (Critical for MYOB):**
- NEVER use JavaScript `number` type for money
- ALWAYS use `Decimal` library for financial calculations
- Round to 2 decimal places for money (use `decimalPlaces(2)`)
- Use half-up rounding for currency (standard accounting method)

**Error Handling:**
- Use try/catch for async operations
- Create custom error types for domain errors
- Never expose sensitive data in error messages
- Log errors with correlation IDs

**Async Patterns:**
- Use async/await, not .then() chains
- Handle promise rejections explicitly
- Set reasonable timeouts for external calls

### Security for AI-Generated Code

**Never Generate:**
- Hardcoded credentials, API keys, or passwords
- Actual customer data or PII in examples
- Production database connection strings
- Real API endpoints or internal URLs

**Always Include:**
- Input validation on all user inputs
- Output encoding to prevent injection
- Authentication checks before sensitive operations
- Audit logging for security-relevant actions

**Secure Examples:**
```typescript
// ✅ Good - use environment variables
const apiKey = process.env.API_KEY;

// ❌ Bad - hardcoded secret
const apiKey = "sk_live_1234567890";
```

### Testing Requirements

**Unit Tests:**
- Generate Jest tests for all new functions
- Cover normal case, edge cases, error cases
- Aim for >80% code coverage
- Mock external dependencies

**Test Structure:**
```typescript
describe('functionName', () => {
  it('should handle normal case', () => {
    // Arrange
    // Act
    // Assert
  });
  
  it('should handle edge case: zero values', () => {
    // Test implementation
  });
  
  it('should throw error for invalid input', () => {
    // Error handling test
  });
});
```

### Documentation

**JSDoc Comments:**
- Add JSDoc to all exported functions, classes, interfaces
- Include @param, @returns, @throws tags
- Provide usage examples for complex functions

**Example:**
```typescript
/**
 * Calculates GST (Goods and Services Tax) for Australian businesses.
 * 
 * @param amount - The gross amount (GST-inclusive)
 * @param options - Calculation options
 * @returns The GST component rounded to 2 decimal places
 * @throws {ValidationError} If amount is negative
 * 
 * @example
 * const gst = calculateGST(new Decimal('110'));
 * // Returns: Decimal('10.00')
 */
```

## MYOB-Specific Context

### Financial Domain

**When generating financial code:**
- Use precise terminology (GST, PAYG, BAS, superannuation)
- Consider Australian and New Zealand tax rules
- Include audit trail requirements (who, what, when)
- Handle multi-currency if applicable
- Validate calculations against regulatory requirements

**Example Domain Objects:**
```typescript
interface Invoice {
  id: string;
  amount: Decimal;  // Not number!
  gstAmount?: Decimal;
  currency: 'AUD' | 'NZD' | 'GBP';
  createdAt: Date;
  createdBy: string;  // Audit trail
}
```

### Compliance Requirements

**For compliance-sensitive features:**
- Add comments explaining regulatory requirements
- Include links to ATO/IRD documentation
- Maintain audit trails (7 year retention for financial)
- Test against official examples/scenarios

## References to MYOB Standards

For detailed technical standards, refer to **MYOB Architecture Codex**:

- **API Design**: REST patterns, authentication, versioning → See Architecture Codex
- **Security Standards**: Low Bar requirements, threat modeling → See Architecture Codex
- **CI/CD Practices**: Pipeline requirements, deployment → See Architecture Codex  
- **Observability**: Logging formats, metrics, alerting → See Architecture Codex
- **Data Architecture**: Schema design, migrations → See Architecture Codex

### Using MCP to Access Standards

When generating code, use Glean MCP to access MYOB standards:

```
Using Glean MCP, search for MYOB [topic] standards, then generate code
following those standards.
```

## MCP Configuration Guidelines

### Recommended MCPs for MYOB Development

- **Glean MCP**: Access MYOB internal documentation and standards
- **GitHub MCP**: Search MYOB repositories for code examples
- **Atlassian MCP**: Access Jira tickets and Confluence pages
- **Filesystem MCP**: Understand local project structure

### Using MCPs Effectively

**In prompts, explicitly request MCP usage:**
```
@glean Search for MYOB authentication patterns
@github Find examples of JWT implementation in our repos
```

**Let MCPs provide context automatically:**
- MCPs will inject relevant context based on your query
- Review context panel to see what MCPs found
- Adjust prompts if wrong context retrieved

## Prompt Engineering Tips

### Be Specific

❌ **Vague:** "Fix this code"  
✅ **Specific:** "Refactor to use async/await, add error handling, use Decimal for amounts"

### Provide Context

Include:
- What you're trying to accomplish
- Relevant code and types
- Error messages (if debugging)
- Requirements or constraints

### Specify Output Format

```
Generate TypeScript interface for Customer.
Include: id, name, email, businessType, createdAt
Add JSDoc comments explaining each field.
```

### Use Examples

Show the pattern you want:
```
Following this pattern:

[paste example of good code]

Generate similar code for: [new requirement]
```

## Model Selection in Prompts

### For Different Tasks

**Simple code generation → GPT-4o (fast)**
```
Generate a function to validate email addresses
```

**Complex debugging → o1 (reasoning)**
```
This payment calculation fails for international transactions. 
Find the root cause. [include code, error logs, requirements]
```

**Large refactoring → Claude 200k (long context)**
```
Refactor authentication across these 10 microservices
[include all 10 services]
```

See [Model Selection Guide](pages/getting-started/choosing-the-right-model.md) for detailed guidance.

## Common Pitfalls to Avoid

### Don't Trust AI Blindly

- ❌ Accept financial calculations without verification
- ❌ Deploy security code without review
- ❌ Use AI-suggested dependencies without checking
- ❌ Skip testing because "AI generated tests"

### Do Validate Outputs

- ✅ Review all AI-generated code
- ✅ Verify financial calculations manually
- ✅ Check dependencies for vulnerabilities
- ✅ Test AI-generated code thoroughly
- ✅ Ensure compliance with MYOB standards

## Quick Reference

### MYOB AI Development Checklist

When using AI to generate code:

- [ ] Code follows TypeScript strict mode
- [ ] Financial calculations use Decimal (not number)
- [ ] No hardcoded secrets or credentials
- [ ] Error handling implemented
- [ ] Unit tests generated and passing
- [ ] JSDoc comments on public APIs
- [ ] Security reviewed (especially auth/financial code)
- [ ] Complies with MYOB coding standards
- [ ] Uses MYOB-approved dependencies

## Resources

- **This Playbook**: Comprehensive AI-assisted development guide
- **Architecture Codex**: [Technical standards](pages/appendix/architecture-codex-references.md)
- **Prompt Library**: [Common prompts](pages/appendix/prompt-library/README.md)
- **MCP Setup**: [MCP usage guide](pages/feature-development/mcp-usage.md)
- **Model Selection**: [Choosing models](pages/getting-started/choosing-the-right-model.md)

---

**Note:** This file provides AI-specific guidance for code generation. For comprehensive MYOB technical standards, architecture patterns, and platform guidance, refer to the MYOB Architecture Codex.
